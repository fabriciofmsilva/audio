(function main () {
  /* navigator is a WEB API that allows scripts to register themselves and carry out their activities. */
  if ('serviceWorker' in navigator) {
    console.log('Service Worker is supported in your browser');
    /* register method takes in the path of service worker file and returns a promises, which returns the registration object */
    navigator
      .serviceWorker
      .register('./service-worker.js')
      .then(registration => {
        console.log('Service Worker is registered!')
      });

    /* register method takes in an optional second parameter as an object. To restrict the scope of a service worker, the scope should be provided.
    scope: '/books' will intercept requests with '/books' in the url. */
    // navigator
    //   .serviceWorker
    //   .register(
    //     './service-worker.js',
    //     {
    //       scope: '/books'
    //     }
    //   )
    //   .then(registration => {
    //     console.log('Service Worker for scope /books is registered', registration)
    //   });
  } else {
    console.log('Service Worker is not supported in your browser');
  }

  /* Notification.permission can have one of these three values: default, granted or denied. */
  if (Notification.permission === 'default') {
    /* The Notification.requestPermission() method shows a notification permission prompt to the user. It returns a promise that resolves to the value of permission*/
    Notification.requestPermission().then(result => {
      if (result === 'denied') {
        console.log('Permission denied');
        return
      }

      if (result === 'granted') {
        console.log('Permission granted');
        /* This means the user has clicked the Allow button. Weâ€™re to get the subscription token generated by the browser and store it in our database.

        The subscription token can be fetched using the getSubscription method available on pushManager of the serviceWorkerRegistration object. If subscription is not available, we subscribe using the subscribe method available on pushManager. The subscribe method takes in an object.
        */

        serviceWorkerRegistration.pushManager
          .getSubscription()
          .then(subscription => {
            if (!subscription) {
              const applicationServerKey = ''
              serviceWorkerRegistration.pushManager.subscribe({
                userVisibleOnly: true, // All push notifications from server should be displayed to the user
                applicationServerKey // VAPID Public key
              });
            } else {
              saveSubscriptionInDB(subscription, userId); // A method to save subscription token in the database
            }
          });
      }
    });
  }
})()
